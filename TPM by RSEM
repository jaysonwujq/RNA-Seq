我不喜欢看公式，直接说事情，我有一个基因A，它在这个样本的转录组数据中被测序而且mapping到基因组了 5000个的reads，
而这个基因A长度是10K，我们总测序文库是50M，所以这个基因A的RPKM值是 5000除以10，再除以50，为10. 
就是把基因的reads数量根据基因长度和样本测序文库来normalization 。

那么它的TPM值是多少呢？ 这个时候这些信息已经不够了，
需要知道该样本其它基因的RPKM值是多少，加上该样本有3个基因，另外两个基因的RPKM值是5和35，
那么我们的基因A的RPKM值为10需要换算成TPM值就是 1,000,000 *10/(5+10+35)=200,000，看起来是不是有点大呀，
其实主要是因为我们假设的基因太少了，一般个体里面都有两万多个基因的，总和会大大的增加，这样TPM值跟RPKM值差别不会这么恐怖的。

TPM值就是RPKM的百分比！！！

TPM值就是RPKM的百分比！！！

TPM值就是RPKM的百分比！！！

大家肯定想问，TPM的优点是什么呢？很明显，所有基因的TPM值加起来肯定是1M，因为百分比的总和就是1嘛，
与样本无关，各个样本都可以保证TPM库是一样的，这样比较更有意义！！！


公式计算TPM 和 FPKM：
library(plyr)


## Worked example from http://blog.nextgenetics.net/?e=51
X <- data.frame(gene=c("A","B","C","D","E"), count=c(80, 10, 6, 3, 1),
                length=c(100, 50, 25, 5, 1))
X

Y <- data.frame(gene=c("F","G","H","I","J"), count=c(20, 20, 10, 50, 400),
                length=c(100, 50, 25, 5, 1))
Y



## Calculate RPKM

# RPKM = (Rg * 10^6) / (T * Lg)
# where
# Rg: number of reads mapped to a particular transcript g = count
# T = total number of transcripts sampled in run
# FLg: length of transcript g (kilobases)

RPKM <- function(Rg, Lg, T) {
  rpkm <- (Rg * 1e6)/(T * Lg)
  return(rpkm)
}

T <- sum(X$count)

RPKM(Rg=X$count[1],Lg=X$length[1],T=T)
RPKM(Rg=X$count[2],Lg=X$length[2],T=T)
RPKM(Rg=X$count[3],Lg=X$length[3],T=T)

# Calculate RPKM using ddply
?ddply
??summarise
rpkm.X<-ddply(X, .(gene), summarize, rpkm = (count*1e6)/((sum(X$count)*length)))
rpkm.X
mean(rpkm.X$rpkm)

rpkm.Y<-ddply(Y, .(gene), summarize, rpkm = (count*1e6)/((sum(Y$count)*length)))
rpkm.Y
mean(rpkm.Y$rpkm)

## Calculate TPM

# TPM = (Rg * 10^6) / (Tn * Lg)
# where
# Tn = sum of all length normalized transcript counts

# where
# Rg: number of reads mapped to a particular transcript g = count
# T = total number of transcripts sampled in run
# FLg: length of transcript g (kilobases)

(Tn.X <- sum(ddply(X, .(gene), summarize, Tn = count/length)[2]))

TPM <- function(Rg, Lg, Tn) {
  tpm <- (Rg * 1e6)/(Tn * Lg)
  return(tpm)
}

TPM(Rg=X$count[1],Lg=X$length[1],Tn=Tn.X)
TPM(Rg=X$count[2],Lg=X$length[2],Tn=Tn.X)
TPM(Rg=X$count[3],Lg=X$length[3],Tn=Tn.X)

# Great - corresonds to example results!

# Calculate RPKM using ddply
tpm.X <- ddply(X, .(gene), summarize, tpm = (count*1e6)/(Tn.X*length))
tpm.X
mean(tpm.X$tpm)


(Tn.Y <- sum(ddply(Y, .(gene), summarize, Tn = count/length)[2]))

tpm.Y <- ddply(Y, .(gene), summarize, tpm = (count*1e6)/(Tn.Y*length))
tpm.Y
mean(tpm.Y$tpm)

